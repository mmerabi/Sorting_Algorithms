
Testing Michael Merabi's program.
QS: book partition, random pivot, cutoff=50: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
QS: 2ptr partition, random pivot, cutoff=50: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
QS: book partition, lf pivot, cutoff=50: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
QS: 2ptr partition, lf pivot, cutoff=50: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
QS: 3 Partition, cutoff=50: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
QS: book partition, random pivot, cutoff=2: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
QS: 2ptr partition, random pivot, cutoff=2: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
QS: book partition, lf pivot, cutoff=2: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
QS: 2ptr partition, lf pivot, cutoff=2: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
QS: 3 Partition, cutoff=2: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
Almost QS book partition, random pivot, cutoff=2: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
Almost QS 2ptr partition, random pivot, cutoff=2: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
Almost QS 3 Partition, random pivot, cutoff=2: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
HeapSortTD: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
HeapSortBU: 
    26.25.24.23.22.21.20.19.18.17.16.15.14.13.12.11.10.9.8.7.6.5.4.3.2.1.0.
Bigger, QS: book partition, random pivot, cutoff=50:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, QS: 2ptr partition, random pivot, cutoff=50:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, QS: book partition, lf pivot, cutoff=50:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, QS: 2ptr partition, lf pivot, cutoff=50:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, QS: 3 Partition, cutoff=50:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, QS: book partition, random pivot, cutoff=2:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, QS: 2ptr partition, random pivot, cutoff=2:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, QS: book partition, lf pivot, cutoff=2:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, QS: 2ptr partition, lf pivot, cutoff=2:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, QS: 3 Partition, cutoff=2:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, Almost QS book partition, random pivot, cutoff=2:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, Almost QS 2ptr partition, random pivot, cutoff=2:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, Almost QS 3 Partition, random pivot, cutoff=2:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, HeapSortTD:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.
Bigger, HeapSortBU:
    100.631.1162.1693.2224.2755.3286.3817.4348.4879.5410.5941.6472.7003.7534.8065.8596.
    9127.9658.10189.10720.11251.11782.12313.12844.13375.13906.14437.14968.15499.16030.
    16561.17092.17623.18154.18685.19216.19747. done.

Testing Michael Merabi's sorts on a huge array.

Java's QuickSort on random data runs in 4.512 seconds.
Java's QuickSort on the test sets runs in 1.141 seconds.


Michael Merabi's QS: book partition, random pivot, cutoff=50
    on all random values runs in 5.441 seconds.      Java Ratio = 1.20
    on the test sets runs in 2.797 seconds.          Java Ratio = 2.45

Michael Merabi's QS: 2ptr partition, random pivot, cutoff=50
    on all random values runs in 5.026 seconds.      Java Ratio = 1.11
    on the test sets runs in 2.423 seconds.          Java Ratio = 2.12

Michael Merabi's QS: book partition, lf pivot, cutoff=50
    on all random values runs in 4.382 seconds.      Java Ratio = 0.97

Michael Merabi's QS: 2ptr partition, lf pivot, cutoff=50
    on all random values runs in 4.236 seconds.      Java Ratio = 0.93

Michael Merabi's QS: 3 Partition, cutoff=50
    on all random values runs in 7.238 seconds.      Java Ratio = 1.60
    on the test sets runs in 4.747 seconds.          Java Ratio = 4.16

Michael Merabi's QS: book partition, random pivot, cutoff=2
    on all random values runs in 7.568 seconds.      Java Ratio = 1.67
    on the test sets runs in 5.366 seconds.          Java Ratio = 4.70

Michael Merabi's QS: 2ptr partition, random pivot, cutoff=2
    on all random values runs in 8.311 seconds.      Java Ratio = 1.84
    on the test sets runs in 5.135 seconds.          Java Ratio = 4.50

Michael Merabi's QS: book partition, lf pivot, cutoff=2
    on all random values runs in 4.983 seconds.      Java Ratio = 1.10
    Michael Merabi's QS: 2ptr partition, lf pivot, cutoff=2
    on all random values runs in 5.211 seconds.      Java Ratio = 1.15

Michael Merabi's QS: 3 Partition, cutoff=2
    on all random values runs in 11.711 seconds.      Java Ratio = 2.59
    on the test sets runs in 9.333 seconds.          Java Ratio = 8.17

Michael Merabi's Almost QS book partition, random pivot, cutoff=2
    on all random values runs in 7.614 seconds.      Java Ratio = 1.68
    on the test sets runs in 5.205 seconds.          Java Ratio = 4.56

Michael Merabi's Almost QS 2ptr partition, random pivot, cutoff=2
    on all random values runs in 8.948 seconds.      Java Ratio = 1.98
    on the test sets runs in 5.462 seconds.          Java Ratio = 4.78

Michael Merabi's Almost QS 3 Partition, random pivot, cutoff=2
    on all random values runs in 11.484 seconds.      Java Ratio = 2.54
    on the test sets runs in 8.938 seconds.          Java Ratio = 7.83
    
Michael Merabi's Almost QS 3 Partition, random pivot, cutoff=2
    on all random values runs in 11.484 seconds.      Java Ratio = 2.54
    on the test sets runs in 8.938 seconds.          Java Ratio = 7.83

Michael Merabi's HeapSortTD
    on all random values runs in 20.328 seconds.      Java Ratio = 4.50
    on the test sets runs in 7.019 seconds.          Java Ratio = 6.15

Michael Merabi's HeapSortBU
    on all random values runs in 19.610 seconds.      Java Ratio = 4.34
    on the test sets runs in 6.612 seconds.          Java Ratio = 5.79

Done testing Michael Merabi methods.
